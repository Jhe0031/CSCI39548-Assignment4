{"version":3,"sources":["components/TableCell.js","components/TableRow.js","components/Table.js","App.js","reportWebVitals.js","index.js"],"names":["TableCell","props","onClick","handleApplyColor","TableRow","cells","i","numCols","push","Table","addRow","setState","state","numRows","addColumn","removeRow","console","log","removeCol","fillUC","color","selectedColor","document","querySelectorAll","forEach","td","style","backgroundColor","fillAll","allgrids","clearAll","handleColorChange","event","target","value","rows","this","onChange","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e8db61ef.chunk.js","sourcesContent":["function TableCell(props) {\r\n  return <td onClick={props.handleApplyColor}></td>\r\n}\r\n  \r\nexport default TableCell;","import TableCell from \"./TableCell\";\r\n\r\nfunction TableRow(props) {\r\n  let cells = [];\r\n  \r\n  for (let i = 0; i < props.numCols; i++) {\r\n    cells.push(<TableCell handleApplyColor={props.handleApplyColor} />)\r\n  }\r\n  \r\n  return <tr>{cells}</tr>\r\n}\r\n\r\nexport default TableRow;","import { Component } from \"react\";\r\nimport TableRow from \"./TableRow\";\r\n\r\nclass Table extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      numRows: 1,\r\n      numCols: 1,\r\n      selectedColor: \"red\"\r\n    }\r\n  }\r\n\r\n//add a row and increment numRows by 1\r\n  addRow = () => {\r\n    this.setState(state => {\r\n        return {numRows: state.numRows + 1}\r\n    });\r\n  }\r\n\r\n//add a column and increment numCol by 1\r\n  addColumn = () => {\r\n    this.setState(state => {\r\n        return {numCols: state.numCols + 1}\r\n    });\r\n    //if numRow is 0 it adds a row to allow a column to be added\r\n    if(this.state.numRows === 0)\r\n    {\r\n      this.addRow();\r\n    }\r\n  }\r\n\r\n//remove a row\r\n  removeRow = () => {\r\n    //if numRows is 0, state numRows/numCols\r\n    if (this.state.numRows === 0)\r\n    {\r\n        console.log('Row', this.state.numRows);\r\n        console.log('Column', this.state.numCols);\r\n    }\r\n    //otherwise remove row and decrease numRows by 1\r\n    else{\r\n        this.setState(state => {\r\n            return {numRows:state.numRows - 1}\r\n        });\r\n    } \r\n\r\n  }\r\n\r\n//remove column\r\n  removeCol = () => {\r\n    //if no columns are to be removed, return the state of numCols and numRows\r\n    if (this.state.numCols === 0)\r\n    {\r\n      console.log('Row', this.state.numRows);\r\n      console.log('Column', this.state.numCols);\r\n    }\r\n    else\r\n    //otherwise decrease numCols by 1 and remove column\r\n    {\r\n      this.setState(state => {\r\n        return {numCols:state.numCols - 1}\r\n      });\r\n    } \r\n  }\r\n  \r\n  //fill all uncolored cells with the currently selected color\r\n  fillUC = () => {\r\n    let color = this.state.selectedColor;\r\n    document.querySelectorAll('td').forEach(td => { \r\n        if(td.style.backgroundColor == \"\" || td.style.backgroundColor == \"blue\")\r\n        {\r\n            td.style.backgroundColor = color;\r\n        }\r\n    });\r\n  }\r\n  \r\n  //fill all cells with the currently selected color\r\n  fillAll = () => {\r\n    // stored selected color value\r\n    let color = this.state.selectedColor;\r\n    //select all grids, and change color to selected one\r\n    let allgrids = document.querySelectorAll('td').forEach(td => td.style.backgroundColor = color);\r\n    console.log(allgrids);\r\n  }\r\n\r\n  clearAll = () => {\r\n    //change all grids color into intial color = \"blue\"\r\n    document.querySelectorAll('td').forEach(td => td.style.backgroundColor = this.state.selectedColor);\r\n  }\r\n\r\n  handleColorChange = (event) => {\r\n    this.setState({selectedColor: event.target.value});\r\n  }\r\n\r\n  handleApplyColor = (event) => {\r\n    event.target.style.backgroundColor = this.state.selectedColor;\r\n    console.log(this.state.selectedColor);\r\n  }\r\n\r\n  render() {\r\n    let rows = [];\r\n\r\n    for (let i = 0; i < this.state.numRows; i++) {\r\n      rows.push(<TableRow numCols={this.state.numCols} handleApplyColor={this.handleApplyColor} />);\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <button onClick={this.addRow}>Add Row</button>\r\n        <button onClick={this.addColumn}>Add Column</button>\r\n        <button onClick={this.removeCol}>Remove Column</button>\r\n        <button onClick={this.removeRow}>Remove Row</button>\r\n        <button onClick={this.fillUC}>Fill All Uncolored</button>\r\n        <button onClick={this.fillAll}>Fill All</button>\r\n        <button onClick={this.clearAll}>Clear</button>\r\n        <select onChange={this.handleColorChange}>\r\n          <option value=\"#ff6961\">Red</option>\r\n          <option value=\"#ffb347\">Orange</option>\r\n          <option value=\"#FDFD96\">Yellow</option>\r\n          <option value=\"#77dd77\">Green</option>\r\n          <option value=\"#aec6cf\">Blue</option>\r\n          <option value=\"#b19cd9\">Purple</option>\r\n        </select>\r\n        <table>\r\n          {rows}\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Table;","import React from 'react';\r\nimport './App.css';\r\nimport Table from './components/Table';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <Table />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}